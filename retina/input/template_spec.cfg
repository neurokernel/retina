# **** [template_spec.cfg]                      ****
# **** Specification file                       ****
# **** Provides parameter types and defaults    ****
# **** Need to specify only non defaults in     ****
# **** actual configuration                     ****

[General]
    # useful to differentiate results of different runs
    # ! output files are suffixed with _gpot in addition to this
    file_suffix = string(default='')

    dt = float(min=1e-6, default=1e-4)             # simulation time step

    steps = integer(min=1, default=1000)           # number of time steps

    # logging option (log file is neurokernel.log)
    log = option('none', 'file', 'screen', 'both', default='none')

    eye_num = integer(min=1, max=1, default=1)     # number of eyes

[Photoreceptor]
    debug = boolean(default=false)             # LPU debugging flag

    gexf_file = string(default=photoreceptor.gexf.gz)

    input_file = string(default=photoreceptor_input.h5)

    output_file = string(default=photoreceptor_output.h5)

    screentype = option('Cylinder', 'Sphere', default=Sphere)

    micro = integer(min=1, default=30000)      # number of microvilli

    photoreceptors = integer(min=1, default=1)

    # single input type
    single_intype = option('Image', 'Series', 'StepSeq', 'Steps', default='Image')

[Retina]
    debug = boolean(default=false)             # LPU debugging flag

    time_sync = boolean(default=false)         # LPU time synchronization flag

    gexf_file = string(default=retina)

    input_file = string(default=retina_input)

    output_file = string(default=retina_output)

    write_output = boolean(default=true)

    # repetition of inputs in time (input changes every x time steps)
    time_rep = integer(min=1, default=5)
    # repetition of inputs in space (input changes every x pixels)
    space_rep = integer(min=1, default=1)

    # acceptance angle is interommatidial angle times this factor
    acceptance_factor = float(min=0, default=1)

    rings = integer(min=0, default=14)        # number of rings

    micro = integer(min=1, default=30000)     # number of microvilli

    worker_num = integer(min=1, default=1)    # number of worker LPUs

    screentype = option('Cylinder', 'Sphere', default=Sphere)

    # store screen intensity every screen_write_step step
    screen_write_step = integer(min=1, default=10)

    # euler angles that describe rotation of retina,
    # should be 3xretina_num
    # approximations: pi: 3.1415, pi/2: 1.5707
    # for cylinder use (0, -1.5707, 0)
    eulerangles = float_list(min=3, default=list(0, 0, 0))

    radius = float(min=0, default=1.0)         # radius of retina

    # vision model
    model = string(default='retina_model_template')

    # input type
    intype = '''option('Ball', 'Bar', 'FlickerStep', 'Natural', 'Gratings','Video', default='Bar') '''

    # With read option demo writes input to a file and LPU reads it
    # from there, while with generate input is generated at every time
    # step when LPU is simulated
    inputmethod = option('generate', 'read', default='generate')

    # method that computes inputs given the receptive fields of neurons
    # applies only to generate input method (see respactive field)
    filtermethod = option('gpu', 'nogpu', default='gpu')

[PhotorInputType]
    seed = integer(min=0, default=0)

    add_noise = boolean(default=false)

    noise_var = float(min=0, max=1.0, default=0.3)

    same_inputs = boolean(default=false)

    [[Image]]
        # image file from which input is generated
        image_file = string(default=image1.mat)

        # input scaling factor (value of highest luminance)
        scale = float(min=0, default=30000)

    [[Series]]
        # file whose values are used as inputs
        input_file = string(default=ExperimentalData.txt)

        # input scaling factor (multiplies input values)
        scale = float(min=0, default=1000)

    [[StepSeq]]
        # reference level, low, high
        # every time step the input can change from reference to low or high
        # with a certain probability
        levels = float_list(min=3, max=3, default=list(3e4, 3e3, 3e5))

        # how long step lasts (number of time steps)
        step_size = integer(min=1, default=10)

        # how often step is generated (probability per step)
        step_freq = float(min=0, default=0.01)

    [[Steps]]
        # levels will cyclically change between these values
        levels = float_list(default=list(3e3, 3e5))

        # how long each level lasts (number of time steps)
        step_size = integer(min=1, default=500)

        # minimum and maximum multiplier in case of many photoreceptors
        # and number of multipliers (in fact same as parameters of
        # linspace or logspace)
        multipliers = float_list(min=3, max=3, default=list(0, 0, 1))

        # scale of multipliers
        scale = option('linear', 'log', default='log')


[InputType]
    # the shape can be a rectangle now
    shape = int_list(min=2, max=2, default=list(128, 128))
    infilename = string(default=image_inputs.h5)
    writefile = boolean(default=false) # very limited as multiple batch reads overwrite the file

    [[Ball]]
        # relative placement of center of ball in input image
        center = option('center', default='center')

        # input levels for low and high luminance (level 2 > level 1)
        levels = float_list(min=2, max=2, default=list(3e3, 3e5))

        # how fast ball expands (pixel/s)
        speed = float(min=0, default=1000)

        # make background brighter than ball
        white_back = boolean(default=false)

    [[Bar]]
        # width in pixels
        bar_width = integer(default=16)

        # direction v vertical, h horizontal
        direction = option('v', 'h', default='v')

        # luminance levels of background and bar
        levels = float_list(min=2, max=2, default=list(3e3, 3e5))

        # how fast bar moves (pixel/s)
        speed = float(min=0, default=1000)

        # use 2 bars
        double = boolean(default=false)

    [[FlickerStep]]
        # The whole screen changes between specified levels,
        # the pattern of levels is repeated

        # frequency of changing intensity levels
        frequency = float(min=0, default=20)

        # luminance levels (can be as many as one wants)
        levels = float_list(default=list(3e3, 3e5))

    [[Natural]]
        # A video is generated by moving a window within an image.
        # Window is changing direction every few hundred ms
        # or if it reaches the image boundary

        # file where coordinates are stored
        coord_file = string(default=natural_xy.h5)

        # image file from which input is generated
        image_file = string(default=image1.mat)

        # input scaling factor (value of highest luminance)
        scale = float(min=0, default=300000)

        # how fast window moves (pixel/s)
        speed = float(min=0, default=1000)

        # random seed
        seed = integer(min=0, default=0)

        # store coordinate of Natural input
        store_coords = boolean(default=true)

    [[Gratings]]
        x_freq = float(min=0, default=0.02)

        y_freq = float(min=0, default=0)

        x_speed = float(min=0, default=500)

        y_speed = float(min=0, default=0)

        sinusoidal = boolean(default=false)

        levels = float_list(min=2, max=2, default=list(3e1, 3e4))
        
    [[Video]]
        # read a mp4 video as input        
        # video file from which input is generated
        video_file = string(default=demo_video.mp4)
        steps = integer(min = 0, default=1000)
        # input scaling factor (value of highest luminance)
        scale = float(min=0, default=300000)


[Screen]
    [[CylinderScreen]]
        # input image is projected from plane to a cylinder
        # using the default map the projected image
        # covers the half part of the cylinder
        # that corresponds to the eye hemisphere
        # every ray that starts from the center of the eye
        # and crosses the cylinder crosses the eye hemisphere too
        # but not the other way around
        # that results in dark spots at certain parts of the eye
        # which are less if height variable is larger
        # options for map are CylinderToImageMap
        columns = integer(default=200)     # number of columns on cylinder

        parallels = integer(default=200)   # number of parallels on cylinder

        radius = float(default=10)         # cylinder radius

        # (suggested: at least twice the radius)
        height = float(default=20)         # cylinder height

        image_map = option('CylinderToImageMap', default='CylinderToImageMap')

    [[SphereScreen]]
        # input image is projected from plane to a hemisphere
        # that is concentric with the eye hemisphere
        # also both hemispheres cover the same part of the sphere
        # so every ray that begins at the center of the eye
        # either intersects both hemispheres or none
        # radius of the eye is 1
        # options for map are AlbersProjectionMap and
        # EquidistantProjectionMap
        parallels = integer(default=50)      # number of parallels on sphere

        meridians = integer(default=800)     # number of meridians on sphere

        radius = float(default=10)           # cylinder radius

        half = boolean(default=true)

        image_map = '''option('AlbersProjectionMap',
default='AlbersProjectionMap')'''
